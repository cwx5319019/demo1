/*
	分支结构：根据给定的分支，直接跳转进入满足条件的分支内部，不会像if else if那样，从头开始判断哪一个条件是正确的
	语法：switch case 语句
		switch(分支条件){
			case 分支1:
				语句1;
				break;
			case 分支2:
				语句2;
				break;
			...
			case 分支n:
				语句n;
				break;
			default:
				语句0;
				break;
		}
	分析：“分支条件”必须有一个对应的值，所以分支条件必须可读。当然通常情况下，分支条件只会是一个变量
		该语法中，系统会根据“分支条件”的值，直接跳转到与该值相等“分支”中，并执行对应语句
		如果有多个“分支”的值，与“分之条件”相等，语法错误，编译不通过
		如果没有“分支”符合条件，则走default中语句0

	注意：
		① 在switch case 语句中，case只负责转入，不负责跳出，跳出由break负责
	break:专门用来跳出分支结构和循环结构的关键字
		② 在case中，不能直接声明变量


//------------------
#include<stdio.h>

int main(){
	char ch = 0;
	printf("请输入分支:");
	scanf("%c",&ch);
	while(getchar()!=10);
	switch(ch){
		case '1':{
			int a = 5;
			printf("分支1\n");
			break;
		}
		case '2':
			printf("分支2\n");
			break;
		case '3':
			printf("分支3\n");
			break;
		default:
			printf("输入错误\n");
			break;
	}
	return 0;
}

*/




/*
	循环结构：判断给定的循环条件是否成立，如果成立，则执行一次循环，一直执行到循环条件不成立为止。
	从以上描述中，我们得出一个结论，如果希望一个循环不会成为死循环，那么该循环的循环条件必须随着每一次的循环而发生改变(因为如果循环条件不随着循环改变的话，那么一次成立，将会一直成立)
	为了实现一个循环不是死循环这个目的，我们引入了3个概念:
		1：循环变量 该变量会随着循环的进行而发生改变的量
		2：循环条件 由循环变量参与的循环条件，才是不发生死循环的基本条件
		3：循环变量的改变方式，必须逐渐趋近于不满足循环条件的趋势
	以上3点，是一个正常循环的基础条件
	
//------------------------

#include<stdio.h>

int main(){
	int i = 1;
	int res = 0;
	while(i<10){
		printf(" * \n");
		i++;
	}
	while(i<101){
		res = res + i;
		i++;
	}
	printf("res = %d\n",res);
	return 0;
}
//------------------------------------
	
	循环用来做什么：
		面对逻辑相似的功能的时候，我们没有必要重复编写相似的代码，只需要将相似的代码直接放入循环之中，让循环处理相似的逻辑问题，从而提高编程效率

	for循环语句
	语法:for(表达式1;表达式2;表达式3){
			语句1;
		}
	分析：
		表达式1：循环变量的初始值(循环变量的起始点)
		表达式2：循环条件(通过循环条件可以计算出循环变量的结束点)
		表达式3：循环变量的改变方式
	注意：for循环语句中，循环变量的初始化，只会在一整次循环中执行1次
			循环从开始到结束，称为一整次循环
		循环变量的改变方式：只有当循环中的所有语句全都执行完毕之后，循环变量的改变语句才会生效
		
//------------------------------
#include<stdio.h>

int main(){
	int i = 0;
	int j = 0;
	int res = 0;

	for(j=1;j<=10;j++){
		for(i=1;i<=10;i++){
			printf("%d ",i);
		}
		printf("\n");
	}
	return 0;
}
//------------------------------------

	对于循环来说，有几个固定思路可以遵循：
		① 我们应该将一整次的循环，看做是一个功能模块
		② 选择性循环
		③ 计数循环，在循环的过程中，寻找到满足条件的数据后，计数器自增1
		④ 条件触发，在循环中设置一个触发点，假设0是未触发，1是触发，当循环结束之后，查询一个该点是否被触发，就能知道循环是否进入进入过判断语句
		⑤ 异常中断，在循环中设置中断点，然后在循环外部判断该循环是否是异常中断的还是自然结束的，从而就可以得知循环内部是否进入过判断语句
*/


//------------------练习题-----------

/*
	在终端上输出一个 5行5列的由"* "组成的正方形
*/
/*
     *		0	1		
    * *		1	2
   * * *	2	3
  * * * *	3	4
 * * * * *	4	5
*/
#include<stdio.h>
int main(){
	int i = 0,j = 0;
	for(j=0;j<5;j++){
		for(i=0;i<5-j;i++){
			printf(" ");
		}
		for(i=0;i<j+1;i++){
			printf("* ");
		}
		printf("\n");
	}
	return 0;
}


//---------------------------------
/*
	使用循环，求出char数据类型的取值范围
*/
#include<stdio.h>

int main(){
	char a = 0;
	//char b = a+1;
	while(a<(char)(a+1)){
		a++;
		//b++;
	}
	printf("最大值为%d,最小值为%d\n",a,(char)(a+1));
	return 0;
}

//-----------------------------------
/*
	使用循环，求出char数据类型的取值范围
*/
#include<stdio.h>

int main(){
	char a = 0;
	//char b = a+1;
	while(a<(char)(a+1)){
		a++;
		//b++;
	}
	printf("最大值为%d,最小值为%d\n",a,(char)(a+1));
	return 0;
}
//----------------------------每一位不能有3
#include<stdio.h>

int main(){
	int num = 0;//123
	int flag = 1;
	while(flag){
		flag = 0;
		scanf("%d",&num);
		while(getchar()!=10);
		for(;num!=0;num/=10){
			if(num%10==3 || num%10==-3){
				flag = 1;
			}
		}
	}
	return 0;
}
//---------------------------------
/*
	使用switch case编写一个简易的+,-,*,/,%计算器
	普通要求：输入 a 运算符 b,在终端上显示 a 运算符 b = 运算结果
	进阶要求：使用while(1)将整个计算器逻辑嵌套，整个计算逻辑无限循环，直到按q退出,只q就能退出
*/

#include<stdio.h>

int main(){
	double a = 0,b = 0;
	double res = 0;
	char c = 0;
	while(1){
		printf("请输入计算表达式:");
		scanf("%lf",&a);
		scanf("%c",&c);
		if(c=='q'){
			return 0;
		}else if(c=='+'||c=='-'||c=='/'||c=='*'||c=='%'){
			scanf("%lf",&b);
		}
		while(getchar()!=10);
		switch(c){
			case '+':
				res = a + b;
				break;
			case '-':
				res = a - b;
				break;
			case '*':
				res = a * b;
				break;
			case '/':
				if(b==0){res=0;break;}
				res = a / b;
				break;
			case '%':
				if(b==0){res=0;break;}	
				res = (int)a % (int)b;	
				break;
			default:
				break;
		}
		if(c=='+'||c=='-'||c=='/'||c=='*'||c=='%'){
			printf("%g %c %g = %g\n",a,c,b,res);
		}
	}
	return 0;
}
//--------------------------------------
/*
	输出1~1000之内所有的质数
	质数：只有2个约数的数才是质数，就是1和本身
*/

#include<stdio.h>

int main(){
	int i = 0,j = 0;
	//int count = 0;
	//int flag = 0;
	for(i=2;i<1001;i++){
		//flag = 0;
		for(j=2;j<i;j++){
			if(i%j==0){
				break;
			}
		}
		if(j==i){
			printf("%d\n",i);
		}
	}
	return 0;
}
//-----------------------------------------------
/*
	输出1到10000之内所有的完数
	什么是完数: 除去本身之外的所有约数之和等于本身
	例如：6就是完数，6的约数1,2,3,6,除去本身之后就是1,2,3,1+2+3==6
*/
#include<stdio.h>

int main(){
	int i = 0,j = 0;
	int res = 0;
	for(i=1;i<=10000;i++){
		res = 0;
		for(j=1;j<i;j++){
			if(i%j==0){
				res = res + j;	
			}
		}
		if(res == i){
			printf("%d\n",i);
		}
	}
	return 0;
}
//------------------------------------------
/*
	从键盘输入2个数，使用循环求出这两个数的最大公约数和最小公倍数
*/
#include<stdio.h>

int main(){
	int a = 0,b = 0;
	scanf("%d %d",&a,&b);
	while(getchar()!=10);
	int smaller = (a<b)?a:b;
	int i = 0;
/*
	for(i=smaller;1;i--){
		if(a%i==0 && b%i==0){break;}
	}
*/
	for(i=smaller;a%i!=0 || b%i!=0;i--);
	printf("%d 和 %d 的最大公约数为 :%d\n",a,b,i);

	int bigger = (a>b)?a:b;
/*
	for(i=bigger;1;i++){
		if(i%a==0 && i%b==0){break;}
	}
*/
	for(i=bigger;i%a!=0 || i%b!=0;i++);
	printf("%d 和 %d 的最小公倍数为 :%d\n",a,b,i);
	return 0;
}
//-----------------------------------------------------
#include<stdio.h>
/*
	斐波那契数列：前两项是1，从第3项开始，每一项都是前两项之和
*/
/*
			1	1	2	3	5	8	13
第一次循环	n1	n2	n3
第二次循环		n1	n2	n3
第三次循环			n1	n2	n3
*/
int main(){
	int i = 0;
	int n = 0;
	int n1 = 1,n2 = 1;
	int n3 = 1;
	scanf("%d",&n);
	while(getchar()!=10);
	for(i=3;i<=n;i++){
		n3 = n1 + n2;
		n1 = n2;
		n2 = n3;
	}
	printf("第%d项的值为%d\n",n,n3);
	return 0;
}

//------------------------------------倒置12345
#include<stdio.h>
int main(){
	int num = 0;
	scanf("%d",&num);
	while(getchar()!=10);
	//12345
	int i = 0;
	int res = 0;
	//0*10+5
	//5*10+4
	//54*10+3
	//543*10+2
	//5432*10+1
	for(i=num;i>0;i/=10){
		res = res*10 + i%10;
	}
	printf("res = %d\n",res);
	return 0;
}
//-------------------------------------------------

/*
	从键盘上输入任意整型数据，将他翻转后输出

	从键盘输入一个数，判断他是否为回文数
	12321,123321,32123,321123都是回文数，123456不是回文数
*/
//------------------------------------------------
#include<stdio.h>

/*
	键盘输入一个十进制数，将他转换成二进制输出
*/

int main(){
	int num = 0;
	scanf("%d",&num);
	while(getchar()!=10);
	//10
	int i = 0;
	//10%2=	0
	//5%2=	1
	//2%2=	0
	//1%2=	1
	int j = 0;
	int res = 0;
	int temp = 1;
	//0+1*0
	//1+10*1
	//10+100*0
	//10+1000*1
	for(i=num;i>0;i/=2){
		res = res + temp * (i%2);
		temp = temp*10;
	}
	printf("res = %d\n",res);
	return 0;
}
//--------------------------------------
