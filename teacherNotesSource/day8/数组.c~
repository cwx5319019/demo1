/*
	数组：由同一种类型的数据，组合而成的数据结构。或者可以将数组理解成，能够存放相同数据类型的容器，该容器的类型完全取决于所存放的数据的类型
	从内存角度考虑，什么是数组？连续的内存模块，每一个内存模块到底多少，取决于数组的类型
	数组存放数据的时候，已经默认好坐标位置了，所以存放数据的时候，无需手动设定坐标位置

	如何声明一个数组：数组类型  + 数组名[数组容量] = {具体存放的数据，多个之间使用,隔开}
	声明 整型数组 arr[5]为例
	① int arr[5] = {1,3,5,7,9},声明数组arr，并且申请20个字节的内存空间，并且分别对每一个int模块的地址赋值成1,3,5,7,9
	② int arr[5] = {1},声明数组arr，并且申请20个字节内存，并且将第0个模块的地址赋值成1，剩余模块的地址赋值成0
	③ int arr[5] = {0} ,声明数组arr，并且申请20个字节内存，并且所有int模块全都赋值成0
	④ 如果声明数组的时候，最大容量没有填写，那么此时，必须对数组做定义
	⑤ 如果使用变量来声明数组的最大容量的时候，那么次时候，不能对数组做定义

	其实，数组的声明及定义方式，最常用的就是第③个
*/
/*
	数组名的特性：
		数组名单独出现的时候，他代表一个指针，指向了该数组首元素地址的指针
		当数组名配套sizeof或者&符号的时候，此时数组名就会代表整个数组
	数组名作为指针的时候，注意他是一个指针常量(就是该指针是一个常量，不能更改指向)
		当一个指针指向一个数组名之后，该指针就能完全用来代表该数组，直到该指针指向其他地方为止。

//------------------------------		
#include<stdio.h>

int main(){
	int arr[5] = {1,3,5,7,9};
	int brr[5] = {0};

	printf("arr = %p\n",arr);
	printf("arr+1 = %p\n",arr+1);
	printf("&arr = %p\n",&arr);
	printf("&arr+1 = %p\n",&arr+1);
	printf("%lu\n",sizeof(arr));
	int* pa = 0;
	int a = 5;
	pa = arr;     
	pa = brr;
	pa = &a;
	return 0;
}
//-------------------------------
*/
/*
	如何访问一个数组中的元素：
	使用 :数组名[下标位置] 来访问该“下标位置”所代表的内存存放的数据
		注意：下标位置从0开始
*/
/*
	所有的数据结构当中，总是存在以下几种操作
		增，删，改，查，排，遍历
*/
